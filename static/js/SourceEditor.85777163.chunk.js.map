{"version":3,"sources":["Components/Editor/SourceEditor/RequestHeader.tsx","Components/Editor/SourceEditor/RequestSource.tsx","Components/Editor/SourceEditor/LateralMenu.tsx","Components/Editor/SourceEditor/SourceEditor.tsx","Components/Deferred/DeferredAceEditor.tsx"],"names":["RenderHeaderInput","memo","withErrorBoundary","_ref","header","onRemove","onChange","id","_header","Object","slicedToArray","key","value","onKeyChange","useCallback","e","target","onValueChange","onRemoveCallback","react","className","concat","type","name","placeholder","Button","outline","color","onClick","HeaderList","_ref3","headers","React","filter","h","onChangeCallback","index","indexOf","objectSpread","toConsumableArray","map","connect","setSource","updateSource","onFinish","_useChangeEventState","useChangeEventState","_useChangeEventState2","method","setMethod","_useChangeEventState3","_useChangeEventState4","url","setUrl","_useChangeEventState5","_useChangeEventState6","body","setBody","_useState","useState","_useState2","setHeaders","_useState3","_useState4","error","setError","_useToggleState","useToggleState","_useToggleState2","hasBody","setHasBody","submit","asyncToGenerator","regenerator_default","a","mark","_callee","request","json","result","wrap","_context","prev","next","Request","fetch","sent","t0","logError","abrupt","customToString","stop","FormGroup","htmlFor","defaultValue","Form","inline","hidden","length","RequestSource_HeaderList","block","Alert","message","stack","state","autoFormat","getSourceAutoFormat","onFileContentReady","onReset","resetEditor","onClear","clearEditor","changeAutoFormat","updateAutoFormatSource","dropdownIsOpen","toggleDropdown","_useToggleState3","_useToggleState4","modalIsOpen","toggleModal","handleFileChange","logInfo","files","fileReader","FileReader","onload","toString","readAsText","handleAutoFormatChange","ButtonGroup","vertical","ButtonDropdown","isOpen","toggle","DropdownToggle","caret","DropdownMenu","DropdownItem","style","display","check","Label","Input","checked","Modal","role","size","ModalHeader","ModalBody","RequestSource","ModalFooter","sourceText","getSourceText","SourceEditor_LateralMenu","DeferredAceEditor","mode","theme","fontSize","cursorStart","showPrintMargin","showGutter","highlightActiveLine","debounceChangePeriod","minLines","maxLines","enableBasicAutocompletion","enableLiveAutocompletion","wrapEnabled","setOptions","showLineNumbers","editorProps","$blockScrolling","Infinity","annotations","width","AceEditor","lazy","_home_travis_build_magoo_magoo_keyrier_json_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_home_travis_build_magoo_magoo_keyrier_json_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","aceEditor","__webpack_require__","then","t","bind","Promise","all"],"mappings":"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","file":"static/js/SourceEditor.85777163.chunk.js","sourcesContent":["import * as React from 'react'\nimport { Button } from 'reactstrap'\nimport { memo, useCallback, ChangeEvent, FC } from 'react'\nimport { withErrorBoundary } from '../../Common/ErrorBoundary'\n\ninterface Props {\n  header: [string, string]\n  id: number\n  onChange: (h: [string, string]) => void\n  onRemove: (h: [string, string]) => void\n}\n\nexport const RenderHeaderInput: FC<Props> = memo(\n  withErrorBoundary(({ header, onRemove, onChange, id }) => {\n    const [key, value] = header\n\n    const onKeyChange = useCallback((e: ChangeEvent<HTMLInputElement>) => onChange([e.target.value, value]), [onChange])\n    const onValueChange = useCallback((e: ChangeEvent<HTMLInputElement>) => onChange([key, e.target.value]), [onChange])\n    const onRemoveCallback = useCallback(() => onRemove(header), [onRemove])\n\n    return (\n      <div className=\"row align-items-center\">\n        <div className=\"col-sm-5\">\n          <input\n            className=\"form-control-lg form-control\"\n            value={key}\n            id={`headerName${id}`}\n            type=\"text\"\n            name={`headerName${id}`}\n            placeholder=\"enter an name\"\n            onChange={onKeyChange}\n          />\n        </div>\n        <div className=\"col-sm-5\">\n          <input\n            className=\"form-control-lg form-control\"\n            value={value}\n            type=\"text\"\n            name={`headerValue${id}`}\n            id={`headerValue${id}`}\n            placeholder=\"enter an value\"\n            onChange={onValueChange}\n          />\n        </div>\n        <div className=\"col-sm-2\">\n          <Button outline={true} color=\"danger\" onClick={onRemoveCallback}>\n            remove\n          </Button>\n        </div>\n      </div>\n    )\n  })\n)\n","import * as React from 'react'\nimport { logError } from '../../../helpers/logger'\nimport { connect } from 'react-redux'\nimport { updateSource } from '../../../Actions/actions'\nimport { customToString } from '../../../helpers/string'\nimport { RenderHeaderInput } from './RequestHeader'\nimport { useState, memo, useCallback } from 'react'\nimport { Alert, FormGroup, Form, Button } from 'reactstrap'\nimport { useToggleState, useChangeEventState } from '../../../Hooks/hooks'\nimport { withErrorBoundary } from '../../Common/ErrorBoundary'\n\ninterface Props {\n  onFinish: () => void\n  setSource: (src: string) => void\n}\n\nconst HttpRequestSource: React.FC<Props> = ({ onFinish, setSource }) => {\n  const [method, setMethod] = useChangeEventState('GET')\n  const [url, setUrl] = useChangeEventState('https://rickandmortyapi.com/api/character/')\n  const [body, setBody] = useChangeEventState('')\n  const [headers, setHeaders] = useState([['Accept', 'application/json'] as [string, string]])\n  const [error, setError] = useState(null as TypeError | null)\n  const [hasBody, setHasBody] = useToggleState()\n\n  const submit = useCallback(async () => {\n    const requestInit: RequestInit = {\n      method,\n      headers,\n      body: hasBody ? body : null,\n    }\n    const request = new Request(url, requestInit)\n    setError(null)\n\n    let json: string\n    try {\n      const result = await fetch(request)\n      json = await result.json()\n    } catch (e) {\n      logError('HttpRequestSource.submit', e)\n      setError(e)\n      return\n    }\n    setSource(customToString(json))\n    onFinish()\n  }, [method, url, body, headers, hasBody, setError, setSource, onFinish])\n\n  return (\n    <div id=\"HttpRequestSource\">\n      <FormGroup>\n        <label htmlFor=\"requestMethod\">Method</label>\n        <select\n          className=\"form-control-lg form-control\"\n          defaultValue={method}\n          name=\"requestMethod\"\n          id=\"requestMethod\"\n          onChange={setMethod}\n        >\n          <option>GET</option>\n          <option>POST</option>\n          <option>PUT</option>\n          <option>OPTIONS</option>\n        </select>\n      </FormGroup>\n      <FormGroup>\n        <label htmlFor=\"requestUrl\">Request URL</label>\n        <input\n          defaultValue={url}\n          className=\"form-control-lg form-control\"\n          type=\"url\"\n          name=\"requestUrl\"\n          id=\"requestUrl\"\n          placeholder=\"enter an URL\"\n          onChange={setUrl}\n        />\n      </FormGroup>\n      <div className=\"position-relative form-check\">\n        <label className=\"form-check-label\">\n          <input type=\"checkbox\" className=\"form-check-input\" onChange={setHasBody} /> Add body\n        </label>\n      </div>\n      <Form inline={true} hidden={!hasBody}>\n        <FormGroup>\n          <label>Body</label>\n          <input className=\"form-control-lg form-control\" type=\"textarea\" value={body} onChange={setBody} />{' '}\n        </FormGroup>\n      </Form>\n      <label htmlFor=\"headers\">Request headers</label>{' '}\n      <Button\n        outline={true}\n        color=\"primary\"\n        onClick={() => setHeaders([...headers, [`name-${headers.length + 1}`, 'value']])}\n      >\n        Add header\n      </Button>\n      <br />\n      <br />\n      <HeaderList headers={headers} onChange={setHeaders} />\n      <br />\n      <Button block={true} color=\"primary\" onClick={submit}>\n        Submit\n      </Button>\n      {error && (\n        <Alert color=\"danger\">\n          Error: {error.message ? error.message : ''}\n          {error.stack ? error.stack : ''}\n        </Alert>\n      )}\n    </div>\n  )\n}\n\ntype HeaderListProps = {\n  headers: Array<[string, string]>\n  onChange: (headers: Array<[string, string]>) => void\n}\n\nconst HeaderList: React.FC<HeaderListProps> = ({ headers, onChange }) => {\n  const onRemove = React.useCallback((header: [string, string]) => onChange(headers.filter(h => h !== header)), [\n    headers,\n    onChange,\n  ])\n  const onChangeCallback = React.useCallback(\n    (header: [string, string]) => {\n      const index = headers.indexOf(header)\n      headers[index] = { ...header }\n      onChange([...headers])\n    },\n    [headers, onChange]\n  )\n  return (\n    <>\n      {headers.map((header, index) => (\n        <RenderHeaderInput header={header} key={index} id={index} onChange={onChangeCallback} onRemove={onRemove} />\n      ))}\n    </>\n  )\n}\n\nexport default connect(\n  null,\n  { setSource: updateSource }\n)(withErrorBoundary(memo(HttpRequestSource)))\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport {\n  UpdateSource,\n  updateSource,\n  ResetEditor,\n  resetEditor,\n  ClearEditor,\n  clearEditor,\n  updateAutoFormatSource,\n  UpdateAutoFormatSource,\n} from '../../../Actions/actions'\nimport HttpRequestSource from './RequestSource'\nimport { logInfo } from '../../../helpers/logger'\nimport { useToggleState } from '../../../Hooks/hooks'\nimport {\n  ButtonDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  ButtonGroup,\n  FormGroup,\n  Label,\n  Input,\n} from 'reactstrap'\nimport { memo, useCallback } from 'react'\nimport { withErrorBoundary } from '../../Common/ErrorBoundary'\nimport { getSourceAutoFormat } from '../../../Store/selectors'\nimport { RootState } from '../../../State/State'\n\ninterface Props {\n  onFileContentReady: (fileContent: string) => UpdateSource\n  changeAutoFormat: (active: boolean) => UpdateAutoFormatSource\n  onReset: () => ResetEditor\n  onClear: () => ClearEditor\n  autoFormat: boolean\n}\n\nconst LateralMenu: React.FC<Props> = ({ onReset, onFileContentReady, onClear, autoFormat, changeAutoFormat }) => {\n  const [dropdownIsOpen, toggleDropdown] = useToggleState()\n  const [modalIsOpen, toggleModal] = useToggleState()\n\n  const handleFileChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      logInfo('onFileChange')\n      toggleDropdown()\n      if (e.target.files && e.target.files.length > 0) {\n        const fileReader = new FileReader()\n        logInfo('e.target.files', e.target.files[0].name)\n        fileReader.onload = () => {\n          if (fileReader.result) {\n            onFileContentReady(fileReader.result.toString())\n          }\n        }\n        fileReader.readAsText(e.target.files[0])\n      }\n    },\n    [toggleDropdown, onFileContentReady]\n  )\n\n  const handleAutoFormatChange = useCallback(() => changeAutoFormat(!autoFormat), [changeAutoFormat, autoFormat])\n\n  return (\n    <>\n      <ButtonGroup vertical={true}>\n        <ButtonDropdown isOpen={dropdownIsOpen} toggle={toggleDropdown}>\n          <DropdownToggle id=\"import-menu-button\" caret={true} color=\"primary\">\n            Import\n          </DropdownToggle>\n          <DropdownMenu>\n            <DropdownItem toggle={false}>\n              <label id=\"import-file\">\n                Browse JSON file...\n                <input\n                  type=\"file\"\n                  name=\"file\"\n                  id=\"sourceFile\"\n                  style={{ display: 'none' }}\n                  onChange={handleFileChange}\n                />\n              </label>\n            </DropdownItem>\n            <DropdownItem id=\"http-request\" onClick={toggleModal}>\n              <label>HTTP request</label>\n            </DropdownItem>\n            <DropdownItem onClick={onReset}>\n              <label>Reset</label>\n            </DropdownItem>\n          </DropdownMenu>\n        </ButtonDropdown>\n        <Button color=\"primary\" onClick={onClear}>\n          Clear\n        </Button>\n      </ButtonGroup>\n      <FormGroup className=\"pt-4\" check={true}>\n        <Label check={true}>\n          <Input checked={autoFormat} type=\"checkbox\" onChange={handleAutoFormatChange} />\n          Auto format\n        </Label>\n      </FormGroup>\n      <Modal id=\"requestModal\" role=\"dialog\" size=\"lg\" isOpen={modalIsOpen} toggle={toggleModal}>\n        <ModalHeader toggle={toggleModal}>Import JSON from an HTTP request</ModalHeader>\n        <ModalBody>\n          <HttpRequestSource onFinish={toggleModal} />\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"secondary\" onClick={toggleModal}>\n            Cancel\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  )\n}\n\nconst mapStateToProps = (state: RootState) => ({ autoFormat: getSourceAutoFormat(state) })\n\nexport default connect(\n  mapStateToProps,\n  {\n    onFileContentReady: updateSource,\n    onReset: resetEditor,\n    onClear: clearEditor,\n    changeAutoFormat: updateAutoFormatSource,\n  }\n)(memo(withErrorBoundary(LateralMenu)))\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { UpdateSource, updateSource } from '../../../Actions/actions'\nimport { RootState } from '../../../State/State'\nimport ImportMenu from './LateralMenu'\nimport { AceEditor } from '../../Deferred/DeferredAceEditor'\nimport { getSourceText } from '../../../Store/selectors'\nimport { memo } from 'react'\nimport { withErrorBoundary } from '../../Common/ErrorBoundary'\n\ninterface Props {\n  onChange: (val: string) => UpdateSource\n  sourceText: string\n}\n\nconst SourceEditor: React.FC<Props> = ({ onChange, sourceText }) => (\n  <>\n    <div className=\"row\">\n      <div className=\"col-sm-10 offset-sm-2\">\n        <h3>1. Paste your JSON:</h3>\n      </div>\n    </div>\n    <div className=\"row\">\n      <div className=\"col-sm-2\">\n        <ImportMenu />\n      </div>\n      <div className=\"col-sm-10\">\n        <AceEditor\n          mode=\"json\"\n          theme=\"monokai\"\n          name=\"sourceAceEditor\"\n          onChange={onChange}\n          fontSize={13}\n          cursorStart={1}\n          showPrintMargin={false}\n          showGutter={true}\n          highlightActiveLine={true}\n          value={sourceText}\n          debounceChangePeriod={1000}\n          minLines={35}\n          maxLines={35}\n          enableBasicAutocompletion={false}\n          enableLiveAutocompletion={false}\n          wrapEnabled={false}\n          setOptions={{\n            showLineNumbers: true,\n          }}\n          editorProps={{ $blockScrolling: Infinity }}\n          annotations={[]}\n          width={'100%'}\n        />\n      </div>\n    </div>\n  </>\n)\n\nconst mapStateToProps = (state: RootState) => ({\n  sourceText: getSourceText(state),\n})\n\nexport default connect(\n  mapStateToProps,\n  { onChange: updateSource }\n)(withErrorBoundary(memo(SourceEditor)))\n","import { lazy } from 'react'\n\nexport const AceEditor = lazy(async () => {\n  const aceEditor = await import(/* webpackChunkName: \"react-ace\" */ 'react-ace')\n  await Promise.all([\n    import(/* webpackChunkName: \"brace/theme/monokai\" */ 'brace/theme/monokai'),\n    import(/* webpackChunkName: \"brace/theme/github\" */ 'brace/theme/github'),\n    import(/* webpackChunkName: \"brace/mode/json\" */ 'brace/mode/json'),\n    import(/* webpackChunkName: \"brace/mode/javascript\" */ 'brace/mode/javascript'),\n    import(/* webpackChunkName: \"brace/mode/mysql\" */ 'brace/mode/mysql'),\n    import(/* webpackChunkName: \"brace/ext/language_tools\" */ 'brace/ext/language_tools'),\n    import(/* webpackChunkName: \"brace/ext/searchbox\" */ 'brace/ext/searchbox'),\n    import(/* webpackChunkName: \"brace/snippets/javascript\" */ 'brace/snippets/javascript'),\n    import(/* webpackChunkName: \"brace/snippets/json\" */ 'brace/snippets/json'),\n  ])\n  return aceEditor\n})\n"],"sourceRoot":""}